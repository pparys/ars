You are an expert XML generator. Make sure you generate valid and diverse XML.
Here is the grammar (in the lark format) that you should follow:
start: document

document: PROLOG doctype_decl element

PROLOG: /<[\\?]xml [^>]+[\\?]>/
doctype_decl: "<!DOCTYPE" NAME internal_dtd ">"
internal_dtd: "[" element_decl+ attlist_decl+ "]"
element_decl: "<!ELEMENT" NAME content_spec ">"
attlist_decl: "<!ATTLIST" NAME attribute_def+ ">"

content_spec: /[^>]+/
attribute_def: /[^>]+/

element: "<" NAME attributes ">" content "</" NAME ">" -> paired_element
       | "<" NAME attributes "/>"               -> self_closing_element

attributes: (NAME "=" ESCAPED_STRING)*
content: (element | TEXT | cdata )*

cdata: /<!\[CDATA\[.*?\]\]>/s

NAME: /[a-zA-Z_:][-a-zA-Z0-9_.:]*/
ESCAPED_STRING: /"[^"]*"|'[^']*'/

TEXT: /[^<]+/

%import common.WS
%ignore WS

Question 1:
Generate a short, valid and complex XML file.

Solution 1:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE note [
  <!ELEMENT note (#PCDATA)>
]>
<note>This is a simple note with no children.</note>

Question 2:
Generate a short, valid and complex XML file.

Solution 2:
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE status [
  <!ELEMENT status EMPTY>
  <!ATTLIST status
    code CDATA #REQUIRED
    time CDATA #IMPLIED>
]>
<status code="200" time="2025-09-03T00:04:53"/>

Question 3:
Generate a short, valid and complex XML file.

Solution 3: